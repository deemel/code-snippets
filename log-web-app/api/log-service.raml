#%RAML 0.8
title: Log Service REST
baseUri: "{protocol}://{domain}:{port}/log/api/v{version}"
version: 1
mediaType: application/json

documentation:
  - title:  "Log Service REST API"
    content: |
      ```
      ```
  - title: Introduction
    content: |
      This document describes the Log Server REST API.
  - title: Supported Uses Cases
    content: |
      An application reports log events using the Log Service REST api.
      The Log Service processes each event and stores them into the
      Data Lake.  This interface is for applications that are cloud
      native and need to report logs without using any system calls nor any files.
      There are other interfaces like syslog, files and Java logging framework.
      These alternate interfaces allow for integration of logs
      generated by existing applications with no code changes and
      by system functions on virtual appliances.

      Supported use cases:
      - Ingest log events
      - Check service health

      These use cases are supported with two endpoints "events" and "health".

      A log generating application uses the REST "events" endpoint
      to record a set of log events with the required "message" property.
      All remaining properties are optional.  The log collector will assign
      the default log plane, current date time and a default source
      when these parameters are not provided.
      This basic scenerio allows for an application to log a set of events
      with minimal resource overhead.

      There are extra parameters available for a log generating application
      to provide more details about each event.  These parameters include
      the log plane, date time, source, source type and level.

      The "health" endpoint returns the health of the service.  This provides the platform and
      applications with the status of the service.

schemas:
  - Events:        !include schema/Events.json
  - Message:       !include schema/Message.json
  - Status:        !include schema/Status.json

/events:
  displayName: Log events
  description:
     Ingest a list of one or more log events with an optional log plane.
  post:
    description: Ingest one or more log events
    body:
      application/json:
        schema: Events
        example: !include examples/eventsPostExample.json

    responses:
      201:
        body:
          application/json:
            schema: Message
            example: |
              {"message": "Created log events"}
      400:
        body:
          application/json:
            schema: Message
            example: |
              {"message": "Malformed content"}

/health:
  displayName : Health check
  description:
     Check health status for the service.  This endpoint can be used by platform
     or log producers to check service health.
  get:
    responses:
      200:
         body:
          application/json:
            schema: Status
            example: !include examples/healthGetRespOK.json
      429:
         body:
          application/json:
            schema: Status
            example: !include examples/healthGetRespWARN.json
      503:
         body:
          application/json:
            schema: Status
            example: !include examples/healthGetRespERROR.json
